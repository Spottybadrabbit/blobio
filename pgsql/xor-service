#!/bin/bash
#
#  Synopsis:
#	Show
#  Usage:
#	xor-service							\
#		--pghost condor.setspace.com				\
#		--pgport 5432
#		--pguser postgres
#		--pgdatabase blobio
#  Note:
#	PGPASSWORD can not be passed on the command line.

PROG=$(basename $0)
PSQL='psql --no-psqlrc --quiet --tuples-only --no-align'
SERVICE1_UDIG=${TMPDIR:=/tmp}/$PROG-service1-$$.udig
SERVICE2_UDIG=${TMPDIR:=/tmp}/$PROG-service2-$$.udig

info()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $@"
}

leave()
{
	rm -f $SERVICE_UDIG1 $SERVICE_UDIG2 ||
				info "ERROR: rm tmp failed: exit status=$?" >&2
	info 'good bye, cruel world'
}

die()
{
	info "ERROR: $@" >&2
	exit 1
}

PG2arg()
{
	NAME=$1
	VAL=$2
	CMD="test -z \"\$PG2$(echo $NAME | tr '[a-z]' '[A-Z]')\""
	eval $CMD
	STATUS=$?
	test $STATUS = 0 || die "option --pg$NAME: given more than once"
	echo "$VAL"
}

PG1arg()
{
	NAME=$1

	CMD="test -z \"\$PG$(echo $NAME | tr '[a-z]' '[A-Z]')\""
	eval $CMD
	STATUS=$?
	test $STATUS = 0 || die "option --pg$NAME: given more than once"
	echo "$VAL"
}

test $# = 8 || die "wrong number of arguments: got $#, expected 8"

while [ "$1" ];  do
	case "$1" in
	--pghost)
		shift
		PG2HOST=$(PG2arg host "$1")
		test -n "$PG2HOST" || exit 1
		;;
	--pgport)
		shift
		PG2PORT=$(PG2arg port "$1")
		case "$PG2PORT" in
		[0-9]*)
			;;
		'')
			exit 1
			;;
		esac
		;;
	--pguser)
		shift
		PG2USER=$(PG2arg user "$1")
		test -n "$PG2USER" || exit 1
		;;
	--pgdatabase)
		shift
		PG2DATABASE=$(PG2arg database "$1")
		test -n "$PG2DATABASE" || exit 1
		;;
	--*)
		die "unknown option: $1"
		;;
	*)
		die "unknown command argument: $1"
		;;
	esac
	shift
done

info 'hello, world'
trap leave EXIT

PGHOST=${PGHOST:=$PGHOST}
test -n "$PGHOST" || die "PGHOST or PGHOST not defined"
info "first PGHOST: $PGHOST"

PGPORT=${PGPORT:=$PGPORT}
test -n "$PGPORT" || die "PGPORT or PGPORT not defined"
info "first PGPORT: $PGPORT"

PGUSER=${PGUSER:=$PGUSER}
test -n "$PGUSER" || die "PGUSER or PGUSER not defined"
info "first PGUSER: $PGUSER"

PGDATABASE=${PGDATABASE:=$PGDATABASE}
test -n "$PGDATABASE" ||
			die "PGDATABASE or PGDATABASE not defined"
info "first PGDATABASE: $PGDATABASE"

info "second PGHOST: $PG2HOST"
info "second PGPORT: $PG2PORT"
info "second PGUSER: $PG2USER"
info "second PGDATABASE: $PG2DATABASE"

info "fetching now from service 1 ..."
NOW=$($PSQL -c 'SELECT now();')
test $? = 0 || die "psql now failed: exit status=$?"
info "now: $NOW"
info "fetching service 1 blob udigs: $SERVICE1_UDIG"
$PSQL --output=$SERVICE1_UDIG" <<END
SELECT
	blob
  FROM
  	
END
