#
#  Synopsis:
#	Flow for syncing a local blobio server with a remote server.
#  Usage:
#	See script make-sync-root to build directory tree for
#	a particular host in $BLOBIO_ROOT/sync/host/remote.host.com.
#
#	cd $BLOBIO_ROOT/sync/host/remote.host.com
#	BLOBIO_ROOT=$(pwd)
#	flowd server etc/sync-remote.host.com &
#

boot
{
	brr_capacity = 32;
	os_exec_capacity = 8;
	os_exec_worker_count = 4;
	flow_worker_count = 4;

	qdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	xdr_roll_duration = "24h";
	heartbeat_duration = "10s";
}

command eat_remote
{
	path = "bin/blobio";
	argv = (
		"eat",
		"--service",
		"bio4:remote.setspace.com:1797",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

command put_remote
{
	path = "sbin/sync-put";
	argv = (
		"bio4:remote.setspace.com:1797"
	);
	exit_status is OK when in {0, 1, 2};
}

command brr_blob_existed
{
	path = "true";
}

command brr_blob_taken
{
	path = "true";
}

tail brr
{
	path = "spool/biod.brr";
}

#
#  Does the blob exist local now, by executing
#
#	blobio eat --service bio4:localhost:1797 --udig brr.udig
#
command eat_local
{
	path = "bin/blobio";
	argv = (
		"eat",
		"--service",
		"bio4:localhost:1797",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

#
#  Zap a remote blob by executing
#
#	ssh user@remote.host.com					\
#		blobio take --service bio4:localhost:1797 		\
#			--output-path /dev/null				\
#			--udig brr.udig
#

command zap_remote
{
	path = "ssh";
	argv = (
		"user@remote.host.com",
		"blobio",
		"take",
		"--service",
		"bio4:localhost:1797",
		"--output-path",
		"/dev/null",
		"--udig"
	);
}

#
#  The blob existed according to blob request record.
#
#  Note:
#	Including the "eat" verb means we could get into loops with the 
#	remote server when it probes with an "eat".  Unfortunatly, the brr
#	tuple only has the ipaddress in the netflow field, which is problematic.
#

call brr_blob_existed()
  when
	(
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "give"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	(
		brr.chat_history == "ok"
		or
		brr.chat_history == "ok,ok"
		or
		brr.chat_history == "ok,ok,ok"
	)
;

call brr_blob_taken()
  when
	brr.verb == "take"
	and
	brr.chat_history == "ok,ok,ok"
;

call eat_local(brr.udig)
  when
  	brr_blob_existed.exit_status == 0
	or
	brr_blob_taken.exit_status == 0
;

call eat_remote(brr.udig)
  when
  	brr_blob_existed.exit_status == 0
	or
	brr_blob_taken.exit_status == 0
;

call put_remote(brr.udig)
  when
  	brr_blob_existed.exit_status ==	0	#  brr proves exists
	and
	eat_local.exit_status == 0		#  exists locally
	and
	eat_remote.exit_status == 1		#  does not exist remotely
;

#  only zap the blob when it does not exist locally but does exist remotely

call zap_remote(brr.udig)
  when
  	brr_blob_taken.exit_status == 0		#  blob was taken at one time
	and
  	eat_local.exit_status == 1		#  does not exist locally
	and
	eat_remote.exit_status == 0		#  exists remotely
;
